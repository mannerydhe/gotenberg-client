{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Gotenberg Python Client","text":"<p>This is a Python client for interfacing with Gotenberg, which in turn is a wrapper around powerful tools for PDF generation and creation in various ways, using a stateless API. It's a very powerful tool to generate and manipulate PDFs.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>HTTP/2 enabled by default</li> <li>Abstract away the handling of multi-part/form-data and deal with <code>Path</code>s instead</li> <li>Based on the modern httpx library</li> <li>Full support for type hinting and concrete return types as much as possible</li> <li>Nearly full test coverage run against an actual Gotenberg server for multiple Python and PyPy versions</li> </ul>"},{"location":"#examples","title":"Examples","text":"<p>Converting a single HTML file into a PDF:</p> <pre><code>from gotenberg_client import GotenbergClient\n\nwith GotenbergClient(\"http://localhost:3000\") as client:\n    with client.chromium.html_to_pdf() as route:\n      response = route.index(\"my-index.html\").run()\n      Path(\"my-index.pdf\").write_bytes(response.content)\n</code></pre> <p>Converting an HTML file with additional resources into a PDF:</p> <pre><code>from gotenberg_client import GotenbergClient\n\nwith GotenbergClient(\"http://localhost:3000\") as client:\n    with client.chromium.html_to_pdf() as route:\n      response = route.index(\"my-index.html\").resource(\"image.png\").resource(\"style.css\").run()\n      Path(\"my-index.pdf\").write_bytes(response.content)\n</code></pre> <p>Converting an HTML file with additional resources into a PDF/A1a format:</p> <pre><code>from gotenberg_client import GotenbergClient\nfrom gotenberg_client.options import PdfAFormat\n\nwith GotenbergClient(\"http://localhost:3000\") as client:\n    with client.chromium.html_to_pdf() as route:\n      response = route.index(\"my-index.html\").resources([\"image.png\", \"style.css\"]).pdf_format(PdfAFormat.A1a).run()\n      Path(\"my-index.pdf\").write_bytes(response.content)\n</code></pre> <p>Converting a URL into PDF, in landscape format</p> <pre><code>from gotenberg_client import GotenbergClient\nfrom gotenberg_client.options import PageOrientation\n\nwith GotenbergClient(\"http://localhost:3000\") as client:\n    with client.chromium.html_to_pdf() as route:\n      response = route.url(\"https://hello.world\").orient(PageOrientation.Landscape).run()\n      Path(\"my-world.pdf\").write_bytes(response.content)\n</code></pre> <p>To ensure the proper clean up of all used resources, both the client and the route(s) should be used as context manager. If for some reason you cannot, you should <code>.close</code> the client and any routes:</p> <pre><code>from gotenberg_client import GotenbergClient\n\ntry:\n  client = GotenbergClient(\"http://localhost:3000\")\n  try:\n    route = client.merge([\"myfile.pdf\", \"otherfile.pdf\"]).run()\n  finally:\n    route.close()\nfinally:\n  client.close()\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Documentation site built with Github Pages and Material for MkDocs</li> </ul>"},{"location":"changelog/#041-2023-12-11","title":"[0.4.1] - 2023-12-11","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Implemented an internal workaround for older Gotenberg versions and their handling of non-latin filenames.</li> <li>When detected, the files will be copied into a temporary directory and the filename cleaned</li> <li>Gotenberg 8.0.0 will start implementing something similar once released</li> <li>The pulled Gotenberg image is now inspected, allowing local re-creation of failures against specific digests</li> <li>The <code>:edge</code> tag testing is now allowed to fail</li> </ul>"},{"location":"changelog/#040-2023-12-04","title":"[0.4.0] - 2023-12-04","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Removed some certain special cases from coverage</li> <li>Updated <code>pre-commit</code> hook versions</li> <li>Updated how pytest is configured, so it will apply to any invocation</li> <li>Updated test running image to log at warning or lower using text format</li> <li>Updated test running image from 7.9.2 to 7.10.1</li> <li>For the moment, send both <code>pdfa</code> and <code>pdfFormat</code> for compatibility with 7.9 and 7.10</li> <li>See here for some subtle differences in what these options mean</li> </ul>"},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Added new test job against Gotenberg's <code>:edge</code> tag</li> </ul>"},{"location":"changelog/#030-2023-10-17","title":"[0.3.0] - 2023-10-17","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Support for the output filename and request tracing for all routes</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>References to compression and Brotli. Gotenberg doesn't seem to ever compress response data</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>An issue with the sorting of merging PDFs. Expanded testing to cover the merged ordering</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Multiple merge calls on the same route will maintain the ordering of all files, rather than just per merge call</li> </ul>"},{"location":"changelog/#020-2023-10-16","title":"[0.2.0] - 2023-10-16","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>CodeQL scanning via GitHub</li> <li>Codecov.io coverage shield</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Updated pypa/gh-action-pypi-publish from 1.8.8 to 1.8.10</li> <li>Updated actions/checkout from 3 to 4</li> <li>Mis-spelled <code>gotenerg_url</code> for a <code>Client</code> is now <code>host</code> and no longer keyword only</li> </ul>"},{"location":"changelog/#010-2023-10-15","title":"[0.1.0] - 2023-10-15","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Chromium conversion routes</li> <li>LibreOffice conversion routes</li> <li>PDF/A conversion route</li> <li>PDF merge route</li> <li>Health status route</li> <li>Testing and typing all setup and passing</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"roadmap/#webhooks","title":"Webhooks","text":"<p>Implement adding the webhooks via headers as defined in the documentation.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#installation","title":"Installation","text":"<pre><code>pip install gotenberg-client\n</code></pre>"},{"location":"usage/#how","title":"How","text":"<p>All the routes and options from the Gotenberg routes are implemented, with the exception of the Prometheus metrics endpoint. All the routes use the same format and general idea.</p> <ol> <li>First, you add the file or files you want to process</li> <li>Then, configure the endpoint with its various options the route supports</li> <li> <p>Finally, run the route and receive your resulting file</p> </li> <li> <p>Files will be PDF or ZIP, depending on what endpoint and its configuration. Endpoints which handle   multiple files, but don't merge them, return a ZIP archive of the resulting PDFs</p> </li> </ol>"},{"location":"usage/#client","title":"Client","text":"<p>First, you obtain a <code>GotenbergClient</code>. As seen below, the host where Gotenberg can be found is required, with optional configuration of global timeouts, the log level (for this library and httpx/httpcore) as well as control over the usage of HTTP/2.</p> <pre><code>class GotenbergClient:\n\n    def __init__(\n        self,\n        host: str,\n        *,\n        timeout: float = 30.0,\n        log_level: int = logging.ERROR,\n        http2: bool = True,\n    ):\n        ....\n</code></pre> <p>The client should live as long as you will be communicating with Gotenberg as this allows the connection to remain open, saving some time to re-negotiate a connection.</p> <p>To ensure proper cleanup of connection, it is suggested to use the client as a context manager. If not using as a context manager, the user should call <code>.close()</code>, preferably inside a <code>finally</code> block.</p>"},{"location":"usage/#routes","title":"Routes","text":"<p>The library supports almost all the routes defined by the Gotenberg API. Only the Prometheus metrics endpoint is not implemented.</p> <p>To utilize a route, you first select the module which provides it, then the actual operation to carry out. For example, using Chromium to convert HTML into a PDF would look like this:</p> <pre><code>with GotenbergClient(\"http://localhost:3000\") as client:\n    with client.chromium.html_to_pdf() as route:\n        ....\n</code></pre> <p>The exact options of each route vary, according to the Gotenberg documentation. Many routes share some common options, such as controlling page size or setting the PDF/A format output.</p> <p>Configuration of a route will always return the the route, allowing chaining of configuration, as seen here:</p> <pre><code>from gotenberg_client import GotenbergClient\nfrom gotenberg_client.options import A4\n\nwith GotenbergClient(\"http://localhost:3000\") as client:\n    with client.chromium.markdown_to_pdf() as route:\n        response = (\n            route.index(\"main.html\")\n            .markdown_file(\"readme.md\")\n            .size(A4)\n            .resource(\"styles.css\")\n            .fail_on_exceptions()\n            .run()\n        )\n</code></pre> <p>Once all configuration is completed, call <code>.run()</code>. This actually sends the information to Gotenberg with all form data as has been configured. At the moment, it returns the full <code>httpx.Response</code>, with the content of the response being the resulting PDF or zip file, depending on the route and configurations.</p>"}]}